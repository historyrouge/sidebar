"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextToSpeechContent = TextToSpeechContent;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const actions_1 = require("@/app/actions");
const button_1 = require("@/components/ui/button");
const card_1 = require("@/components/ui/card");
const textarea_1 = require("@/components/ui/textarea");
const use_toast_1 = require("@/hooks/use-toast");
const lucide_react_1 = require("lucide-react");
const back_button_1 = require("./back-button");
const sidebar_1 = require("./ui/sidebar");
function TextToSpeechContent() {
    const [text, setText] = (0, react_1.useState)("");
    const [audioDataUri, setAudioDataUri] = (0, react_1.useState)(null);
    const [isGenerating, startGenerating] = (0, react_1.useTransition)();
    const { toast } = (0, use_toast_1.useToast)();
    const handleGenerateAudio = () => {
        if (text.trim().length === 0) {
            toast({
                title: "No text provided",
                description: "Please enter some text to convert to speech.",
                variant: "destructive",
            });
            return;
        }
        startGenerating(async () => {
            setAudioDataUri(null);
            const result = await (0, actions_1.textToSpeechAction)({ text });
            if (result.error) {
                toast({ title: "Audio Generation Failed", description: result.error, variant: "destructive" });
            }
            else if (result.data) {
                setAudioDataUri(result.data.audioDataUri);
                toast({ title: "Audio Generated!", description: "Your audio is ready to play." });
            }
        });
    };
    const handleDownload = () => {
        if (!audioDataUri)
            return;
        const a = document.createElement('a');
        a.href = audioDataUri;
        a.download = 'speech.wav';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex h-full flex-col", children: [(0, jsx_runtime_1.jsx)("header", { className: "sticky top-0 z-10 flex h-16 shrink-0 items-center justify-between border-b bg-background px-4 md:px-6", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(sidebar_1.SidebarTrigger, { className: "md:hidden" }), (0, jsx_runtime_1.jsx)(back_button_1.BackButton, {}), (0, jsx_runtime_1.jsx)("h1", { className: "text-xl font-semibold tracking-tight", children: "Text to Speech" })] }) }), (0, jsx_runtime_1.jsx)("main", { className: "flex-1 overflow-y-auto p-4 md:p-6 lg:p-8", children: (0, jsx_runtime_1.jsxs)("div", { className: "mx-auto max-w-2xl space-y-6", children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { children: "Enter Your Text" }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: "Type or paste the text you want to convert to speech. The audio will be generated by Google's TTS model." })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: "Start typing here...", className: "h-40 resize-none", value: text, onChange: (e) => setText(e.target.value) }) })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleGenerateAudio, disabled: isGenerating || text.trim().length === 0, children: [isGenerating ? (0, jsx_runtime_1.jsx)(lucide_react_1.Loader2, { className: "mr-2 h-4 w-4 animate-spin" }) : (0, jsx_runtime_1.jsx)(lucide_react_1.Volume2, { className: "mr-2 h-4 w-4" }), "Generate Audio"] }), audioDataUri && ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { children: "Generated Audio" }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "flex flex-col sm:flex-row items-center gap-4", children: [(0, jsx_runtime_1.jsx)("audio", { controls: true, src: audioDataUri, className: "w-full flex-1", children: "Your browser does not support the audio element." }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: handleDownload, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Download, { className: "mr-2 h-4 w-4" }), "Download WAV"] })] })] }))] }) })] }));
}
